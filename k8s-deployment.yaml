# Kubernetes Deployment Configuration for Reddit Bot
# Production-ready deployment with auto-scaling and monitoring

---
apiVersion: v1
kind: Namespace
metadata:
  name: reddit-bot

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: reddit-bot-config
  namespace: reddit-bot
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  TELEGRAM_USE_WEBHOOK: "true"
  TELEGRAM_WEBHOOK_URL: "https://api.yourdomain.com/webhook"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  DATABASE_HOST: "postgres-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "reddit_bot_db"
  METRICS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: reddit-bot-secrets
  namespace: reddit-bot
type: Opaque
stringData:
  TELEGRAM_BOT_TOKEN: "your-telegram-bot-token"
  OPENAI_API_KEY: "your-openai-api-key"
  ANTHROPIC_API_KEY: "your-anthropic-api-key"
  STRIPE_SECRET_KEY: "your-stripe-secret-key"
  STRIPE_WEBHOOK_SECRET: "your-stripe-webhook-secret"
  DATABASE_PASSWORD: "your-database-password"
  REDIS_PASSWORD: "your-redis-password"
  JWT_SECRET: "your-jwt-secret"
  ENCRYPTION_KEY: "your-encryption-key"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: reddit-bot
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: reddit_bot_db
        - name: POSTGRES_USER
          value: reddit_bot_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reddit-bot-secrets
              key: DATABASE_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - reddit_bot_user
            - -d
            - reddit_bot_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - reddit_bot_user
            - -d
            - reddit_bot_db
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: reddit-bot
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: reddit-bot
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - "allkeys-lru"
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reddit-bot-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: reddit-bot
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reddit-bot-app
  namespace: reddit-bot
spec:
  replicas: 3
  selector:
    matchLabels:
      app: reddit-bot
  template:
    metadata:
      labels:
        app: reddit-bot
    spec:
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for postgres; sleep 2; done']
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis-service 6379; do echo waiting for redis; sleep 2; done']
      - name: run-migrations
        image: reddit-bot:latest
        command: ['python', '-m', 'alembic', 'upgrade', 'head']
        envFrom:
        - configMapRef:
            name: reddit-bot-config
        - secretRef:
            name: reddit-bot-secrets
      containers:
      - name: reddit-bot
        image: reddit-bot:latest
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        envFrom:
        - configMapRef:
            name: reddit-bot-config
        - secretRef:
            name: reddit-bot-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: app-data
          mountPath: /app/data
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: app-data
        emptyDir: {}

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reddit-bot-hpa
  namespace: reddit-bot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reddit-bot-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# Service for the application
apiVersion: v1
kind: Service
metadata:
  name: reddit-bot-service
  namespace: reddit-bot
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  selector:
    app: reddit-bot
  ports:
  - name: http
    port: 80
    targetPort: 8000
  - name: metrics
    port: 9090
    targetPort: 9090
  type: LoadBalancer

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: reddit-bot-ingress
  namespace: reddit-bot
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
spec:
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: reddit-bot-tls
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: reddit-bot-service
            port:
              number: 80

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reddit-bot-worker
  namespace: reddit-bot
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reddit-bot-worker
  template:
    metadata:
      labels:
        app: reddit-bot-worker
    spec:
      containers:
      - name: celery-worker
        image: reddit-bot:latest
        command: ["celery", "-A", "app.worker", "worker", "--loglevel=info", "--concurrency=4"]
        envFrom:
        - configMapRef:
            name: reddit-bot-config
        - secretRef:
            name: reddit-bot-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1"

---
# Celery Beat Deployment (Scheduler)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reddit-bot-scheduler
  namespace: reddit-bot
spec:
  replicas: 1  # Only one scheduler should run
  selector:
    matchLabels:
      app: reddit-bot-scheduler
  template:
    metadata:
      labels:
        app: reddit-bot-scheduler
    spec:
      containers:
      - name: celery-beat
        image: reddit-bot:latest
        command: ["celery", "-A", "app.worker", "beat", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: reddit-bot-config
        - secretRef:
            name: reddit-bot-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: reddit-bot-network-policy
  namespace: reddit-bot
spec:
  podSelector:
    matchLabels:
      app: reddit-bot
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector: {}
      podSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external APIs
    - protocol: TCP
      port: 80   # HTTP for external APIs

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reddit-bot-pdb
  namespace: reddit-bot
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: reddit-bot

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: reddit-bot-monitor
  namespace: reddit-bot
spec:
  selector:
    matchLabels:
      app: reddit-bot
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics