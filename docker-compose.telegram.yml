version: '3.8'

services:
  # PostgreSQL Database for Telegram Account Management
  telegram-postgres:
    image: postgres:15-alpine
    container_name: telegram-postgres
    environment:
      POSTGRES_DB: telegram_accounts
      POSTGRES_USER: telegram_user
      POSTGRES_PASSWORD: ${TELEGRAM_DB_PASSWORD:-secure_password_here}
    volumes:
      - telegram_postgres_data:/var/lib/postgresql/data
      - ./init-scripts/telegram-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - telegram-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_user -d telegram_accounts"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  telegram-redis:
    image: redis:7-alpine
    container_name: telegram-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - telegram_redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - telegram-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram Account Manager Service
  telegram-manager:
    build:
      context: .
      dockerfile: Dockerfile.telegram
    container_name: telegram-manager
    environment:
      # Telegram API Configuration
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_SESSION_KEY: ${TELEGRAM_SESSION_KEY}
      
      # Database Configuration
      DATABASE_URL: postgresql://telegram_user:${TELEGRAM_DB_PASSWORD:-secure_password_here}@telegram-postgres:5432/telegram_accounts
      REDIS_URL: redis://telegram-redis:6379/0
      
      # Safety Configuration
      TELEGRAM_ENVIRONMENT: ${TELEGRAM_ENVIRONMENT:-production}
      TELEGRAM_DEFAULT_SAFETY_LEVEL: conservative
      TELEGRAM_MAX_MESSAGES_DAY: 50
      TELEGRAM_MAX_GROUPS_DAY: 2
      TELEGRAM_MAX_DMS_DAY: 5
      
      # AI Configuration
      TELEGRAM_LLM_PROVIDER: ${TELEGRAM_LLM_PROVIDER:-anthropic}
      TELEGRAM_MODEL_NAME: ${TELEGRAM_MODEL_NAME:-claude-3-sonnet}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Monitoring
      PROMETHEUS_ENABLED: true
      STRUCTURED_LOGGING: true
      LOG_LEVEL: INFO
    volumes:
      - ./sessions:/app/sessions
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8001:8000"  # API port
      - "9091:9090"  # Prometheus metrics
    depends_on:
      telegram-postgres:
        condition: service_healthy
      telegram-redis:
        condition: service_healthy
    networks:
      - telegram-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker for Background Tasks
  telegram-worker:
    build:
      context: .
      dockerfile: Dockerfile.telegram
    container_name: telegram-worker
    command: celery -A app.tasks.telegram_tasks worker --loglevel=info --concurrency=4
    environment:
      # Same environment as telegram-manager
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_SESSION_KEY: ${TELEGRAM_SESSION_KEY}
      DATABASE_URL: postgresql://telegram_user:${TELEGRAM_DB_PASSWORD:-secure_password_here}@telegram-postgres:5432/telegram_accounts
      REDIS_URL: redis://telegram-redis:6379/0
      CELERY_BROKER_URL: redis://telegram-redis:6379/1
      CELERY_RESULT_BACKEND: redis://telegram-redis:6379/2
    volumes:
      - ./sessions:/app/sessions
      - ./logs:/app/logs
    depends_on:
      - telegram-postgres
      - telegram-redis
    networks:
      - telegram-network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  telegram-beat:
    build:
      context: .
      dockerfile: Dockerfile.telegram
    container_name: telegram-beat
    command: celery -A app.tasks.telegram_tasks beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://telegram_user:${TELEGRAM_DB_PASSWORD:-secure_password_here}@telegram-postgres:5432/telegram_accounts
      REDIS_URL: redis://telegram-redis:6379/0
      CELERY_BROKER_URL: redis://telegram-redis:6379/1
      CELERY_RESULT_BACKEND: redis://telegram-redis:6379/2
    depends_on:
      - telegram-postgres
      - telegram-redis
    networks:
      - telegram-network
    restart: unless-stopped

  # Prometheus for Monitoring
  telegram-prometheus:
    image: prom/prometheus:latest
    container_name: telegram-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - telegram_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9092:9090"
    networks:
      - telegram-network
    restart: unless-stopped

  # Grafana for Dashboards
  telegram-grafana:
    image: grafana/grafana:latest
    container_name: telegram-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - telegram_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - telegram-prometheus
    networks:
      - telegram-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  telegram-nginx:
    image: nginx:alpine
    container_name: telegram-nginx
    volumes:
      - ./nginx/telegram.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - telegram-manager
    networks:
      - telegram-network
    restart: unless-stopped

networks:
  telegram-network:
    driver: bridge

volumes:
  telegram_postgres_data:
  telegram_redis_data:
  telegram_prometheus_data:
  telegram_grafana_data: