/**
 * Kelly Manual Intervention Panel Component
 * Control panel for manual takeover, emergency controls, and agent status management
 */

import React, { useState, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Play,
  Pause,
  Square,
  AlertTriangle,
  Shield,
  Brain,
  Zap,
  Settings,
  ChevronDown,
  ChevronUp,
  Clock,
  TrendingUp,
  TrendingDown,
  Eye,
  EyeOff,
  Volume2,
  VolumeX,
  RefreshCw,
  BarChart3,
  Activity,
  Users,
  MessageSquare,
  Target,
  Heart,
  Lightbulb,
  Cpu,
  Wifi
} from 'lucide-react';
import { KellyConversation, ConversationStage } from '@/types/kelly';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { cn, formatRelativeTime } from '@/lib/utils';

interface ManualInterventionPanelProps {
  conversation: KellyConversation;
  manualMode: boolean;
  onManualModeToggle: (enabled: boolean) => void;
  className?: string;
}

interface QuickReplyTemplate {
  id: string;
  text: string;
  category: 'greeting' | 'question' | 'closing' | 'concern' | 'redirect';
  confidence: number;
}

export const ManualInterventionPanel: React.FC<ManualInterventionPanelProps> = ({
  conversation,
  manualMode,
  onManualModeToggle,
  className
}) => {
  const [expanded, setExpanded] = useState(false);
  const [showQuickReplies, setShowQuickReplies] = useState(false);
  const [autoMode, setAutoMode] = useState(!manualMode);
  const [notifications, setNotifications] = useState(true);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Quick reply templates
  const quickReplies: QuickReplyTemplate[] = useMemo(() => [
    {
      id: '1',
      text: "Thanks for sharing that with me! I'd love to know more about...",
      category: 'question',
      confidence: 85
    },
    {
      id: '2', 
      text: "I appreciate you taking the time to chat with me today ðŸ˜Š",
      category: 'greeting',
      confidence: 92
    },
    {
      id: '3',
      text: "That's really interesting! Have you considered...",
      category: 'question',
      confidence: 78
    },
    {
      id: '4',
      text: "I understand your concern. Let me clarify...",
      category: 'concern',
      confidence: 88
    },
    {
      id: '5',
      text: "I'd love to continue this conversation later. When works best for you?",
      category: 'closing',
      confidence: 90
    }
  ], []);

  const handlePauseKelly = useCallback(async () => {
    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/v1/kelly/conversations/${conversation.id}/pause`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        onManualModeToggle(true);\n        setAutoMode(false);\n      }\n    } catch (error) {\n      console.error('Failed to pause Kelly:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [conversation.id, onManualModeToggle]);\n\n  const handleResumeKelly = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/v1/kelly/conversations/${conversation.id}/resume`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        onManualModeToggle(false);\n        setAutoMode(true);\n      }\n    } catch (error) {\n      console.error('Failed to resume Kelly:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [conversation.id, onManualModeToggle]);\n\n  const handleEmergencyStop = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/v1/kelly/conversations/${conversation.id}/emergency-stop`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ reason: 'Manual emergency stop' })\n      });\n      \n      if (response.ok) {\n        onManualModeToggle(true);\n        setAutoMode(false);\n      }\n    } catch (error) {\n      console.error('Failed to emergency stop:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [conversation.id, onManualModeToggle]);\n\n  const getStageProgress = useCallback((stage: ConversationStage) => {\n    const stages = ['initial_contact', 'rapport_building', 'qualification', 'engagement', 'advanced_engagement', 'payment_discussion'];\n    return ((stages.indexOf(stage) + 1) / stages.length) * 100;\n  }, []);\n\n  const getStageColor = useCallback((stage: ConversationStage) => {\n    switch (stage) {\n      case 'initial_contact': return 'text-blue-600';\n      case 'rapport_building': return 'text-green-600';\n      case 'qualification': return 'text-yellow-600';\n      case 'engagement': return 'text-purple-600';\n      case 'advanced_engagement': return 'text-indigo-600';\n      case 'payment_discussion': return 'text-emerald-600';\n      default: return 'text-gray-600';\n    }\n  }, []);\n\n  const getSafetyStatusColor = useCallback((score: number) => {\n    if (score >= 80) return 'text-states-flow';\n    if (score >= 60) return 'text-consciousness-accent';\n    return 'text-states-stress';\n  }, []);\n\n  const getEngagementStatusColor = useCallback((score: number) => {\n    if (score >= 80) return 'text-states-flow';\n    if (score >= 60) return 'text-consciousness-primary';\n    if (score >= 40) return 'text-consciousness-accent';\n    return 'text-states-stress';\n  }, []);\n\n  const useQuickReply = useCallback((reply: QuickReplyTemplate) => {\n    // This would typically be handled by the parent component\n    console.log('Using quick reply:', reply.text);\n  }, []);\n\n  return (\n    <Card className={cn(\"border-0 rounded-none shadow-sm\", className)}>\n      <div className=\"p-4\">\n        {/* Header with main controls */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-4\">\n            {/* Kelly Status */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={cn(\n                \"w-3 h-3 rounded-full\",\n                manualMode ? \"bg-consciousness-accent animate-pulse\" : \"bg-states-flow\"\n              )} />\n              <span className={cn(\n                \"font-medium text-sm\",\n                manualMode ? \"text-consciousness-accent\" : \"text-states-flow\"\n              )}>\n                {manualMode ? \"Manual Mode\" : \"Auto Mode\"}\n              </span>\n            </div>\n            \n            {/* Conversation Info */}\n            <div className=\"flex items-center space-x-4 text-sm text-text-tertiary\">\n              <div className=\"flex items-center space-x-1\">\n                <MessageSquare className=\"h-4 w-4\" />\n                <span>{conversation.message_count} messages</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{formatRelativeTime(conversation.last_activity)}</span>\n              </div>\n              \n              <div className={cn(\n                \"flex items-center space-x-1\",\n                getStageColor(conversation.stage)\n              )}>\n                <Target className=\"h-4 w-4\" />\n                <span className=\"capitalize\">{conversation.stage.replace('_', ' ')}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Main Controls */}\n            {manualMode ? (\n              <Button\n                onClick={handleResumeKelly}\n                disabled={isLoading}\n                variant=\"success\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <Play className=\"h-4 w-4\" />\n                <span>Resume Kelly</span>\n              </Button>\n            ) : (\n              <Button\n                onClick={handlePauseKelly}\n                disabled={isLoading}\n                variant=\"warning\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <Pause className=\"h-4 w-4\" />\n                <span>Pause Kelly</span>\n              </Button>\n            )}\n            \n            {/* Emergency Stop */}\n            <Button\n              onClick={handleEmergencyStop}\n              disabled={isLoading}\n              variant=\"destructive\"\n              size=\"sm\"\n              className=\"flex items-center space-x-2\"\n            >\n              <Square className=\"h-4 w-4\" />\n              <span>Emergency Stop</span>\n            </Button>\n            \n            {/* Expand/Collapse */}\n            <Button\n              onClick={() => setExpanded(!expanded)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2\"\n            >\n              {expanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Quick Metrics Bar */}\n        <div className=\"grid grid-cols-4 gap-4 mb-4\">\n          <div className=\"text-center\">\n            <div className={cn(\n              \"text-lg font-bold\",\n              getEngagementStatusColor(conversation.engagement_score)\n            )}>\n              {conversation.engagement_score}%\n            </div>\n            <div className=\"text-xs text-text-tertiary\">Engagement</div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className={cn(\n              \"text-lg font-bold\",\n              getSafetyStatusColor(conversation.safety_score)\n            )}>\n              {conversation.safety_score}%\n            </div>\n            <div className=\"text-xs text-text-tertiary\">Safety</div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-lg font-bold text-consciousness-primary\">\n              {Math.round(getStageProgress(conversation.stage))}%\n            </div>\n            <div className=\"text-xs text-text-tertiary\">Progress</div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className={cn(\n              \"text-lg font-bold\",\n              conversation.red_flags.length > 0 ? \"text-states-stress\" : \"text-states-flow\"\n            )}>\n              {conversation.red_flags.length}\n            </div>\n            <div className=\"text-xs text-text-tertiary\">Red Flags</div>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-4\">\n          <div className=\"flex items-center justify-between text-xs text-text-tertiary mb-1\">\n            <span>Conversation Progress</span>\n            <span>{Math.round(getStageProgress(conversation.stage))}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <motion.div\n              initial={{ width: 0 }}\n              animate={{ width: `${getStageProgress(conversation.stage)}%` }}\n              transition={{ duration: 0.5 }}\n              className=\"bg-consciousness-primary h-2 rounded-full\"\n            />\n          </div>\n        </div>\n\n        {/* Expanded Panel */}\n        <AnimatePresence>\n          {expanded && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.3 }}\n              className=\"space-y-4\"\n            >\n              {/* Quick Reply Suggestions */}\n              {manualMode && (\n                <div>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Lightbulb className=\"h-4 w-4 text-consciousness-secondary\" />\n                      <span className=\"font-medium text-sm\">Quick Replies</span>\n                    </div>\n                    <Button\n                      onClick={() => setShowQuickReplies(!showQuickReplies)}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-xs\"\n                    >\n                      {showQuickReplies ? 'Hide' : 'Show'}\n                    </Button>\n                  </div>\n                  \n                  <AnimatePresence>\n                    {showQuickReplies && (\n                      <motion.div\n                        initial={{ opacity: 0, height: 0 }}\n                        animate={{ opacity: 1, height: 'auto' }}\n                        exit={{ opacity: 0, height: 0 }}\n                        className=\"grid grid-cols-1 gap-2 max-h-32 overflow-y-auto\"\n                      >\n                        {quickReplies.map((reply) => (\n                          <motion.button\n                            key={reply.id}\n                            whileHover={{ scale: 1.02 }}\n                            whileTap={{ scale: 0.98 }}\n                            onClick={() => useQuickReply(reply)}\n                            className=\"text-left p-3 bg-consciousness-primary/5 hover:bg-consciousness-primary/10 rounded-lg border border-consciousness-primary/20 transition-colors\"\n                          >\n                            <div className=\"flex items-start justify-between\">\n                              <p className=\"text-sm text-text-primary flex-1 pr-2\">\n                                {reply.text}\n                              </p>\n                              <div className=\"flex items-center space-x-1 text-xs\">\n                                <span className={cn(\n                                  \"px-2 py-0.5 rounded-full text-xs\",\n                                  reply.category === 'greeting' ? 'bg-green-100 text-green-800' :\n                                  reply.category === 'question' ? 'bg-blue-100 text-blue-800' :\n                                  reply.category === 'concern' ? 'bg-yellow-100 text-yellow-800' :\n                                  reply.category === 'closing' ? 'bg-purple-100 text-purple-800' :\n                                  'bg-gray-100 text-gray-800'\n                                )}>\n                                  {reply.category}\n                                </span>\n                                <span className=\"text-text-tertiary\">\n                                  {reply.confidence}%\n                                </span>\n                              </div>\n                            </div>\n                          </motion.button>\n                        ))}\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                </div>\n              )}\n\n              {/* Agent Status & Controls */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center space-x-2\">\n                    <Cpu className=\"h-4 w-4 text-consciousness-secondary\" />\n                    <span>Agent Status</span>\n                  </h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-text-secondary\">Auto Responses:</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className={cn(\n                          \"w-2 h-2 rounded-full\",\n                          !manualMode ? \"bg-states-flow\" : \"bg-states-stress\"\n                        )} />\n                        <span className={cn(\n                          \"text-xs\",\n                          !manualMode ? \"text-states-flow\" : \"text-states-stress\"\n                        )}>\n                          {!manualMode ? 'Active' : 'Paused'}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-text-secondary\">AI Confidence:</span>\n                      <span className={cn(\n                        \"text-xs font-medium\",\n                        conversation.ai_confidence && conversation.ai_confidence >= 80 ? \"text-states-flow\" :\n                        conversation.ai_confidence && conversation.ai_confidence >= 60 ? \"text-consciousness-primary\" :\n                        \"text-consciousness-accent\"\n                      )}>\n                        {conversation.ai_confidence ? `${Math.round(conversation.ai_confidence)}%` : 'N/A'}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-text-secondary\">Response Time:</span>\n                      <span className=\"text-xs text-text-tertiary\">~2.3s avg</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center space-x-2\">\n                    <Settings className=\"h-4 w-4 text-consciousness-secondary\" />\n                    <span>Quick Settings</span>\n                  </h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-text-secondary\">Notifications:</span>\n                      <button\n                        onClick={() => setNotifications(!notifications)}\n                        className={cn(\n                          \"relative inline-flex h-5 w-9 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none\",\n                          notifications ? 'bg-consciousness-primary' : 'bg-gray-300'\n                        )}\n                      >\n                        <span\n                          className={cn(\n                            \"pointer-events-none inline-block h-4 w-4 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out\",\n                            notifications ? 'translate-x-4' : 'translate-x-0'\n                          )}\n                        />\n                      </button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-text-secondary\">Auto Mode:</span>\n                      <button\n                        onClick={() => autoMode ? handlePauseKelly() : handleResumeKelly()}\n                        disabled={isLoading}\n                        className={cn(\n                          \"relative inline-flex h-5 w-9 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none\",\n                          autoMode ? 'bg-states-flow' : 'bg-consciousness-accent'\n                        )}\n                      >\n                        <span\n                          className={cn(\n                            \"pointer-events-none inline-block h-4 w-4 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out\",\n                            autoMode ? 'translate-x-4' : 'translate-x-0'\n                          )}\n                        />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Red Flags & Safety Alerts */}\n              {conversation.red_flags.length > 0 && (\n                <div>\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center space-x-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-states-stress\" />\n                    <span>Active Red Flags ({conversation.red_flags.length})</span>\n                  </h4>\n                  <div className=\"space-y-2 max-h-24 overflow-y-auto\">\n                    {conversation.red_flags.slice(0, 3).map((flag, index) => (\n                      <div key={index} className=\"bg-states-stress/10 border border-states-stress/20 rounded-lg p-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium text-states-stress capitalize\">\n                            {flag.type.replace('_', ' ')}\n                          </span>\n                          <span className={cn(\n                            \"text-xs px-2 py-0.5 rounded-full\",\n                            flag.severity === 'critical' ? \"bg-states-stress text-white\" :\n                            flag.severity === 'high' ? \"bg-consciousness-accent text-white\" :\n                            \"bg-yellow-500 text-white\"\n                          )}>\n                            {flag.severity}\n                          </span>\n                        </div>\n                        <p className=\"text-xs text-states-stress/80 mt-1\">{flag.description}</p>\n                      </div>\n                    ))}\n                    {conversation.red_flags.length > 3 && (\n                      <div className=\"text-xs text-text-tertiary text-center py-1\">\n                        +{conversation.red_flags.length - 3} more flags\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </Card>\n  );\n};\n\nexport default ManualInterventionPanel;"